// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
}
// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
}

//returnRandBase();
const pAequorFactory = (number,dnaArray)=> {

  return {
    
    specimenNum : number,
    dna : dnaArray,
    mutate(){
      
      let randomIndex = Math.floor(Math.random()*15);
      const randombase=this.dna[randomIndex];
      
      //let randomIndexForBase = Math.florr(Math.random()*4);
      
        
        while(1){
          let baseRand = returnRandBase();
              if(baseRand!==randombase){
                dna[randomIndex]=baseRand;
                break;
              }
      
              }
   
    },
    compareDNA(pAequor){
      let counter = 0;
      let sameLocation = [];
      
      for(let i = 0;i<this.dna.length ;i++){
        for(let j=0;j<pAequor.dna.length;j++){
          if(this.dna[i]===pAequor.dna[j]){
            
            ++counter;
            if(i===j){
              sameLocation.push(i);
   
               }
    
             
             }

        }
      }
      
      let percentage = Number.parseFloat((counter/15)*100).toFixed(5)   ;
      
      console.log(`specimen ${pAequor.specimenNum} and specimen ${this.specimenNum} have ${percentage} DNA in common`);
 
      
    },
    willLikelySurvive(){
      
      let counter1 = 0;
    this.dna.forEach(base =>{
      
      if(base==='C'||base==='G'){
        
        ++counter1;
 
         }
      
      
      
    })
      
      let percent = Math.floor((counter1/15)*100);
      
      if(percent>=60){
        
        return true
         
         
         }else return false ;
      

    }
 
  }
}

/*const test = pAequorFactory(1,mockUpStrand());
console.log(test);
*/


/*const test = pAequorFactory(2,mockUpStrand());
console.log(test);

*/

const survivingSpecimen = [];
let idCounter = 1;

while (survivingSpecimen.length < 30) {
  let newOrg = pAequorFactory(idCounter, mockUpStrand());
  if (newOrg.willLikelySurvive()) {
    survivingSpecimen.push(newOrg);
  }
  idCounter++;
}

console.log(survivingSpecimen)